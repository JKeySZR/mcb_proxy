<?php

// Определяем константы для таблицы mcb_proxy_users поле inet  byte 
define('MCB_PROXY_STANDART', 0);  // обычный интернет накладываются глобальные ограничения
define('MCB_PROXY_LIMITED', 1);   // Есть ограничения на сайты
define('MCB_PROXY_ALLOW_ONLY', 2); // Доступ только на разрешенные явно сайты
define('MCB_PROXY_DENY_ONLY', 3); // Доступ только на разрешенные явно сайты
define('MCB_PROXY_UNLIMITED', 255);  // Интеренет без ограничений

/**
 * Вспомогательная функция для ображения к переменным,
 *  получения их имени по значению
 * @return type
 */
function _mcb_proxy_constants($opt = null) {
  $name = array(
    'MCB_PROXY_STANDART' => 0, // обычный интернет накладываются глобальные ограничения
    'MCB_PROXY_LIMITED' => 1, // Есть ограничения на сайты
    'MCB_PROXY_ALLOW_ONLY' => 2, // Доступ только на разрешенные явно сайты
    'MCB_PROXY_DENY_ONLY' => 3, // Доступ только на разрешенные явно сайты
    'MCB_PROXY_UNLIMITED' => 255, // Интеренет без ограничений    
  );

  $value = array_flip($name);

  switch ($opt) {
    case 'NAME':
      return $name;
      break;
    case 'NUM':
      return $value;
      break;

    default:
      break;
  }

  return array(
    'NAME' => $name,
    'NUM' => $value,
  );
}

function mcb_proxy_init() {
  drupal_add_css(drupal_get_path('module', 'mcb_proxy') . '/css/mcb_proxy_style.css');
  drupal_add_js(drupal_get_path('module', 'mcb_proxy') . '/js/mcb_proxy_jfunctions.js');
}

/**
 * Implements hook_permission();
 */
function mcb_proxy_permission() {
  return array(
    'access protected mcb_proxy_full' => array(
      'title' => 'MCB Proxy manage',
      'description' => 'Управление proxy Squid',
    ),
//    'access protected mcb_proxy_' => array(
//      'title' => 'MCB Proxy manage',
//      'description' => 'Управление proxy Squid',
//    ),    
  );
}

function mcb_proxy_menu() {
  $items = array();

  $items['mcb/mcb_proxy/admin'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcb_proxy_form_groups_list'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mcb_proxy.admin.inc',
  );
  
 $items['mcb/mcb_proxy/admin/group/add'] = array(
    'title' => 'Добавить новую группу',
    'access arguments' => array('access content'),
    'page callback' => 'drupal_get_form',    
    'page arguments' => array('mcb_proxy_form_group_add'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mcb_proxy.admin.inc',
  );  

    $items['mcb/mcb_proxy/admin/groups'] = array(
    'title' => 'Управление группами',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
   

  $items['mcb/mcb_proxy/admin/users'] = array(
    'title' => 'List of users',
    'page callback' => 'mcb_proxy_page_users',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['mcb/mcb_proxy/admin/user/edit/%'] = array(
    'title' => 'Редактирование пользователя proxy',
    'description' => 'Squid управление пользователями', //описание страницы
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcb_proxy_form_user_edit', 4),
    'access arguments' => array('access content'), //  Ограничиваем доступ, по ролям через hook_permission
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mcb_proxy.admin.inc',
    'weight' => 200,
  );

  $items['mcb/mcb_proxy/admin/user/add'] = array(
    'title' => 'Добавить пользователя proxy',
    'description' => 'Squid управление пользователями', //описание страницы
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcb_proxy_form_user_add'),
    'access arguments' => array('access content'), //  Ограничиваем доступ, по ролям через hook_permission
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mcb_proxy.admin.inc',
    'weight' => 100,
  );  
  
  $items['mcb/mcb_proxy/admin/user/import'] = array(
    'title' => 'Импортировать пользователей proxy',
    'description' => 'Squid import пользователей', //описание страницы
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcb_proxy_form_user_import'),
    'access arguments' => array('access content'), //  Ограничиваем доступ, по ролям через hook_permission
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mcb_proxy.admin.inc',
  );

  $items['mcb/mcb_proxy/admin/user/autocomplete'] = array(
    'page callback' => 'mcb_proxy_autocomplete_user_ldap',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['mcb/mcb_proxy/index'] = array(
    'title' => t('Custom module'),
    'page callback' => 'mcb_proxy_index_action',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['mcb/mcb_proxy/sites'] = array(
    'title' => 'Add site to DB',
    'page callback' => 'mcb_proxy_page_sites',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['mcb/mcb_proxy/groups'] = array(
    'title' => 'Groups in LDAP',
    'page callback' => 'mcb_proxy_page_groups',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );


  $items['mcb/mcb_proxy/devel'] = array(
    'title' => 'Импортировать пользователей proxy',
    'description' => 'Squid import пользователей', //описание страницы
    //'page callback' => 'mcb_proxy_page_user_import',
    'page callback' => 'mcb_proxy_page_devel',
    //'page arguments' => array('mcb_proxy_form_user_import'),
    'access arguments' => array('access content'), //  Ограничиваем доступ, по ролям через hook_permission
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mcb_proxy.admin.inc',
  );

  // На данный адресс  перенаправляет SQUID вслучаии запрета
  // Посл чего анализируем входящие параметры, и в зависимости от скрипта выводим соответствуеще сообщение
  $items['mcb/mcb_proxy/deny/%/%'] = array(
    'title' => 'Ограничения PROXY',
    'description' => 'Squid VAR пользователей', //описание страницы    
    'page callback' => 'mcb_proxy_page_deny',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function mcb_proxy_theme() {
  return array(
    'mcb_proxy_index' => array(
      'template' => 'mcb_proxy_index'
    )
  );
}

function mcb_proxy_index_action() {
  return theme('mcb_proxy_index', array());
}

/**
 *  Заносим сайты
 */
function mcb_proxy_page_sites() {
  //module_load_include($type, $module)
  $dbg = 0;
  $bg = ldap_servers_get_servers();

  $email = 'bocharov-ms@metcombank.ru';
  // Get all enabled enabled servers.
  if ($ldap_servers = ldap_servers_get_servers('metkom_novell', 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Run a search.
    if ($results = $ldap_server->search('cn=metcombank_net,ou=dnsdhcp,ou=A1SRV,ou=HQM,o=MCB', 'objectClass=dNIPDNSRRset')) {
      $dbg = 5;
      dsm($results);
    }
    else {
      drupal_set_message(t('No results for that email.'));
    }
  }
  else {
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
  }



  $content = 'Buga-ga';
  $content .= render(drupal_get_form('mcb_proxy_form_sites_add'));
  return $content;
}

/**
 * Implements hook_forms();
 */
function mcb_proxy_form_sites_add($form_id, &$form_state) {

  //drupal_set_title('Я тебя по IP вычислю');
  $form['site'] = array(
    '#type' => 'fieldset',
    '#attributes' => array('class' => array('f_bss')),
  );

  $form['site']['domain'] = array(
    '#type' => 'textfield',
    '#title' => 'Домен',
    '#size' => 40,
    '#maxlength' => 30,
    //'#attributes' => array('class' => array('frm_bss')),
    '#prefix' => '<div class="frm_bss">',
    '#suffix' => '</div>',
  );



  $form['submit'] = array(
    '#value' => 'Добавить',
    '#type' => 'submit',
    '#submit' => array('it_novell_search_submit'),
    '#attributes' => array('class' => array('btn find')),
  );

  return $form;
}

/**
 *  Заносим сайты
 */
function mcb_proxy_page_groups() {
  //module_load_include($type, $module)
  $content = 'Buga-ga';
  $dbg = 0;

  $headers = array(
    array('data' => 'Group Name',),
    array('data' => 'Members of group',),
  );

  $dn = 'ou=Internet_Proxy,ou=ACCESS,o=MCB';
  $filter = '(objectClass=groupOfNames)';
  $results = mcb_proxy_ldap_search($dn, $filter);
  $table = _mcb_proxy_ldap_get_group($results);

  $rows = $table;

//  $rows = array(
//    array('field' => 'First_Name', 'data' => $result->first_name),
//    array('field' => 'Last_Name', 'data' => $result->last_name),
//  );

  $table_data = array(
    'header' => $headers,
    'rows' => $rows,
    'sticky' => TRUE,
    'empty' => 'No results found',
    'attributes' => array(),
    'caption' => count($data['rows']) . ' rows',
    'colgroups' => array()
  );

  $content .= theme_table($table_data);

//  $content .= render(drupal_get_form('mcb_proxy_form_sites_add'));
  return $content;
}

/**
 *  Вспомогательная функция по разбору результата запроса  на наличие групп и 
 *  членов входящих в эту группу. 
 * 
 * @param type $entry
 */
function _mcb_proxy_ldap_get_group(&$results) {
  $dbg = 0;
  $tables = array();
  // Получили результат запроса. Теперь  посмотрим каие атрибуты нам 
  // доступны в этой выборке. 
  $attributes_display = array();
  if (isset($results[0]) && $results[0]) { // searching on all attributes
    foreach ($results[0] as $k => $v) {
      if (is_numeric($k)) {
        $attributes_display[] = $v;
      }
    }
  }
  unset($v);
  unset($k);



  foreach ($results as $i => $entry) {
    $dbg = 5;
    // Получаем название группы
    if (isset($entry['cn'])) {
      // Проверяем есть ли у этой групы члены, если есть получить их
      $members = '';
      if (isset($entry['member'])) {
        unset($entry['member']['count']);
        foreach ($entry['member'] as $key => $value) {
          $members .= $value . '<br>';
        }
      }
      $tables[$entry['cn'][0]] = array(
        array('data' => $entry['cn'][0]),
        array('data' => $members),
      );
    }
    // variable_set($name, $value);
  }
  return $tables;
}

/**
 *  Страница списка пользователей прокси.
 * 
 * @return string
 */
function mcb_proxy_page_users() {
  $content = '<p>';
  $content .= '<b><a href="/mcb/mcb_proxy/admin/user/add" >Добавить пользователя </a></b><br>';
  $content .= '<b><a href="/mcb/mcb_proxy/admin/user/import" >Импорт пользователей</a></b>';
  $content .= '</p>';
  $headers = array(
    array('data' => 'User Name',),
    array('data' => 'inet type',),
    array('data' => 'LDAP Groups',),
  );

  $query = db_select('mcb_proxy_users', 'u')
      ->fields('u')
      ->execute();
  $result = $query->fetchAll();

  $dn = 'ou=Internet_Proxy,ou=ACCESS,o=MCB';
  $ff = _mcb_proxy_constants('NUM');

  foreach ($result as $value) {
    // Ищем пользователя в LDAP    
    $member = $value->login;
    $filter = '(& (objectClass=groupOfNames) (member=' . $member . ') )';
    $ldap_groups = _mcb_proxy_ldap_get_group(mcb_proxy_ldap_search($dn, $filter));
    $groups = implode('<br>', array_keys($ldap_groups));
    $rows[] = array(
      '<a href="/mcb/mcb_proxy/user/edit/' . $value->id . '" >' . $value->login . ' </a>',
      $ff[$value->inet],
      $groups,
    );
  }




//  $rows = array(
//    array('field' => 'First_Name', 'data' => $result->first_name),
//    array('field' => 'Last_Name', 'data' => $result->last_name),
//  );

  $table_data = array(
    'header' => $headers,
    'rows' => $rows,
    'sticky' => TRUE,
    'empty' => 'No results found',
    'attributes' => array(),
    'caption' => count($rows) . ' rows',
    'colgroups' => array()
  );

  $content .= theme_table($table_data);


  // Выводим в табличном виде с пагинацией

  return $content;
}

/**
 *  Ищем чего либо в LDAP
 * 
 * @param type $dn
 * @param type $filter
 * @return boolean
 */
function mcb_proxy_ldap_search($dn, $filter) {
  $dbg = 0;
//  $dn = 'ou=Internet_Proxy,ou=ACCESS,o=MCB';
//  $condition = 'objectClass=groupOfNames';
  if ($ldap_servers = ldap_servers_get_servers('metkom_novell', 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Run a search.
    if ($results = $ldap_server->search($dn, $filter)) {
      $dbg = 5;
    }
    else {
      drupal_set_message(t('No results for that query.'));
      $results = FALSE;
    }
  }
  else {
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
    $results = FALSE;
  }
  return $results;
}

/**
 * Создание группы в LDAP
 * 
 * @param string $group_dn "cn=NAME_OF_GROUP,ou=Internet_Proxy,ou=ACCESS,o=MCB";
 * @param array $attributes можно не задавать , добавит необходимые атрибуты сам
 * @return boolean
 */
function mcb_proxy_ldap_groupAddGroup($group_dn, $attributes = array()) {

  // Для того чтобы добавить пользователя в группу в eDir
  //   необходимо добавить 2  атрибута  
  if (count($attributes) == 0) {
    $attributes = array(
      'owner' => 'cn=admin002,o=MCB',
      'objectClass' => array('groupOfNames', 'Top'),
      'ACL' => '2#entry#[Root]#member',
    );
//  $attributes = array(
//    'ACL' => '2#entry#[Root]#member',
//    'owner' => 'cn=admin002,o=MCB',
//    'objectClass' => array('groupOfNames', 'Top'),
//      );                
  }

  $dbg = 0;
  $return = FALSE;
  if ($ldap_servers = ldap_servers_get_servers('edir-rw', 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    if ($results = $ldap_server->groupAddGroup($group_dn, $attributes)) {
      $dbg = 5;
      $msg = 'LDAPadd create group [' . $group_dn . '] SUCSESS';
      drupal_set_message($msg, 'status');
      $return = TRUE;
    }
    else {
      $msg = 'LDAPadd create group [' . $group_dn . '] FAILED';
      drupal_set_message($msg, 'warning');
      $return = FALSE;
    }
  }
  else {
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
    $return = FALSE;
  }

  return $return;
}

/**
 * Удаление из  LDAP  указанной группы 
 * 
 * @param string $group_dn
 * @param type $only_if_group_empty
 * @return boolean
 */
function mcb_proxy_ldap_groupRemoveGroup($group_dn, $only_if_group_empty = TRUE) {

  $dbg = 0;
  $return = FALSE;
  if ($ldap_servers = ldap_servers_get_servers('edir-rw', 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    if ($results = $ldap_server->groupRemoveGroup($group_dn, $only_if_group_empty)) {
      $dbg = 5;
      $msg = 'LDAPadd Remove group [' . $group_dn . '] SUCSESS';
      drupal_set_message($msg, 'status');
      $return = TRUE;
    }
    else {
      $msg = 'LDAPadd Remove group [' . $group_dn . '] FAILED';
      drupal_set_message($msg, 'warning');
      $return = FALSE;
    }
  }
  else {
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
    $return = FALSE;
  }

  return $return;
}

/**
 * Функция изменения атрибутов у какой-либо записи в LDAP.
 * 
 * @param type $dn
 * @param type $attributes
 * @param boolean $del это флажок $old_attributes в LdapServer.class modifyLdapEntry
 *  о том что необходимо  удалить другие атрибы, если его не выставить
 *  то данные просто дополняются , а не перезаписываются
 * @return boolean
 */
function mcb_proxy_ldap_modify($dn, $attributes, $del = FALSE) {
  $dbg = 0;
//  $dn = 'ou=Internet_Proxy,ou=ACCESS,o=MCB';
//  $condition = 'objectClass=groupOfNames';
  if ($ldap_servers = ldap_servers_get_servers('edir-rw', 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Run a search.
    if ($results = $ldap_server->modifyLdapEntry($dn, $attributes, $del)) {
      $dbg = 5;
      $result = TRUE;
    }
    else {
      drupal_set_message('Update LdapEntry oblomingo.', 'warning');
      $result = FALSE;
    }
  }
  else {
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
    $result = FALSE;
  }
  return $result;
}

/**
 *  Добовляем пользователя в группу LDAP в eDir. 
 * @param string $group_dn  'cn=internet_full,ou=Internet_Proxy,ou=ACCESS,o=MCB'
 * @param string $user   'cn=bocharov-ms,ou=HQM,o=MCB'
 * @param array $groupMembershipsAttr 
 * @return boolean
 */
function mcb_proxy_ldap_groupAddMember($group_dn, $user, $groupMembershipsAttr = NULL) {

  // Для того чтобы добавить пользователя в группу в eDir
  //   необходимо добавить 2  атрибута  
  if (is_null($groupMembershipsAttr)) {
    $groupMembershipsAttr = array(
      'member',
      'equivalentToMe',
    );
  }

  $dbg = 0;
  $return = FALSE;
  if ($ldap_servers = ldap_servers_get_servers('edir-rw', 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // указать 2 атрибута
    $ldap_server->groupGroupEntryMembershipsConfigured = TRUE;
    foreach ($groupMembershipsAttr as $Attr) {
      $ldap_server->groupMembershipsAttr = $Attr;
      if ($results = $ldap_server->groupAddMember($group_dn, $user)) {
        $dbg = 5;
        $return = TRUE;
      }
      else {
        $msg = 'LDAPadd user [' . $user . '] to group [' . $group_dn . '] FAILED';
        drupal_set_message($msg, 'warning');
        $return = FALSE;
      }
    }
  }
  else {
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
    $return = FALSE;
  }

  return $return;
}

/**
 *  Добовляем пользователя в группу LDAP в eDir. 
 * @param string $group_dn  'cn=internet_full,ou=Internet_Proxy,ou=ACCESS,o=MCB'
 * @param string $user   'cn=bocharov-ms,ou=HQM,o=MCB'
 * @param array $groupMembershipsAttr 
 * @return boolean
 */
function mcb_proxy_ldap_groupRemoveMember($group_dn, $user, $groupMembershipsAttr = NULL) {

  // Для того чтобы добавить пользователя в группу в eDir
  //   необходимо добавить 2  атрибута  
  if (is_null($groupMembershipsAttr)) {
    $groupMembershipsAttr = array(
      'member',
      'equivalentToMe',
    );
  }

  $dbg = 0;
  $return = FALSE;
  if ($ldap_servers = ldap_servers_get_servers('edir-rw', 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // указать 2 атрибута
    $ldap_server->groupGroupEntryMembershipsConfigured = TRUE;
    foreach ($groupMembershipsAttr as $Attr) {
      $ldap_server->groupMembershipsAttr = $Attr;
      if ($results = $ldap_server->groupRemoveMember($group_dn, $user)) {
        $dbg = 5;
        $return = TRUE;
      }
      else {
        $msg = 'LDAP remove user [' . $user . '] from group [' . $group_dn . '] FAILED';
        drupal_set_message($msg, 'warning');
        $return = FALSE;
      }
    }
  }
  else {
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
    $return = FALSE;
  }

  return $return;
}

/**
 * Для отладки 
 * 
 * @return string
 */
function mcb_proxy_page_devel() {
  $content = 'Debug';
  $dbg = 0;


  $n_context = 'HQM';
  $n_login = 'bocharov-ms';
  //$n_proxy_group = 'internet_full';
  //$n_proxy_group = 'internet';
  //$n_proxy_group = 'sfa_labutina-ee_nnv';
  $n_proxy_group = 'sfa_ulmer-ei_spb';
  //$n_proxy_group = 'jko';
  //$n_proxy_group = 'block_video';

  $group_dn = "cn=idiot,ou=Internet_Proxy,ou=ACCESS,o=MCB";
  //mcb_proxy_ldap_groupRemoveGroup($group_dn);

  $red = mcb_proxy_ldap_userAddInternet($n_login, $n_context, $n_proxy_group);
  //$red = mcb_proxy_ldap_userRemoveInternet($n_login, $n_context, $n_proxy_group);
//  mcb_proxy_page_user_import();
  // $r = mcb_proxy_ldap_groupAddMember($group_dn, $user);
  //$r = mcb_proxy_ldap_groupRemoveMember($group_dn, $user);
  // $r = mcb_proxy_ldap_modify($dn, $attributes); 

  return $content;
}

/**
 * Страница заглушка, накоторую SQUID  перенапровляет deny_info
 *  для информирования пользователя почему, он не видит этого сайта
 * 
 * @param type $acl_name
 * @param type $proxy_user
 * @return string
 */
function mcb_proxy_page_deny($acl_name, $proxy_user) {
  $dbg = 0;
  $param = drupal_get_query_parameters();
  $log = drupal_get_path('module', 'mcb_proxy') . '/deny.log';
  $text = print_r($param, true);
  file_put_contents($log, $text . PHP_EOL . PHP_EOL, FILE_APPEND);
  $content = '';
  switch ($acl_name) {
    case 'blacklist':
      drupal_set_title('Черный список');
      $content .= "<p>";
      $content .= "<b>$proxy_user</b> вы обратились к адресу: <br>";
      $content .= "<em>" . $param['url'] . "</em> <br>";
      $content .= "Данный адрес находится в черном списке, доступ к нему закрыт.";
      $content .= "</p>";
      break;

    default:
      break;
  }




  return $content;
}

function _mcb_proxy_ldap_getUser($user) {
  $dbg = 0;
//  $dn = 'ou=Internet_Proxy,ou=ACCESS,o=MCB';
//  $condition = 'objectClass=groupOfNames';  
}

/**
 * Вспомогательная функция по разбору результата поиска в LDAP чтобы
 * получить интересуемые параметры
 * 
 * 
 * @param array $attributes
 * @param type $entry
 * @return array массив где в качестве ключа название атрибута.
 */
function _mcb_proxy_ldap_entry_get_attr($attributes, $entry) {
  $dbg = 0;
  if (!is_array($attributes))
    return FALSE;
  $result = array();
  foreach ($entry[0] as $name => $value) {
    if (is_numeric($name))
      continue;
    // Если это тот атрибут который нам нужет тогда вычленяем его.
    if (in_array(strtolower($name), $attributes)) {
      $dbg = 1;
      unset($value['count']);
      $result[$name] = $value;
    }
  }
  return $result;
}

/**
 * Добавления указанного пользователя в соответсвующую группу в LDAP
 * 
 * Из обращения в саппорт Novella
 * [#931]: Программный доступ к дереву.
 * 
 * На самом деле вносить изменения в eDir через LDAP вполне нормально, и никаких проблем быть не должно, но в вопросе членства в группах вы действительно совершили ошибку:
 * членство в группе в понимании eDirectory это 2 пары аттрибутов т.е. итого 4:
 * эти два у группы надо прописать в DN пользователя:
 * member 
 * equivalentToMe
 * 
 * а эти два наоборот у пользователя со значением DN группы:
 * memberOf
 * sequrityEquals 
 * 
 * @param string $n_login  логин пользователя в eDir bocharov-ms
 * @param string $n_context второй уровень в дереве  HQM/HQC и т.п.
 * @param string $n_proxy_group наименование группы в ou=Internet_Proxy,ou=ACCESS,o=MCB
 * @param string $n_proxy_group_dn  если выставленно это значение полный путь до нужной  группы
 * @return boolean
 */
function mcb_proxy_ldap_userAddInternet($n_login, $n_context, $n_proxy_group, $n_proxy_group_dn = NULL) {

  $dbg = 0;

//  $n_context = 'HQM';
//  $n_login = 'bocharov-ms';
//  $n_proxy_group = 'internet_full';

  $n_login_dn = "cn=$n_login,ou=$n_context,o=MCB";
  // Дабы 
  if (is_null($n_proxy_group_dn)) {
    $n_proxy_group_dn = "cn=$n_proxy_group,ou=Internet_Proxy,ou=ACCESS,o=MCB";
  }

  $dn = "ou=$n_context,o=MCB";
  $filter = "(cn=$n_login)";
  $securityEquals = $n_proxy_group_dn;
  $groupMembership = $n_proxy_group_dn;

  // Получаем все атрибуты пользователя. Необходимо добавить обработку если такого пользователя нет
  $dd = mcb_proxy_ldap_search($dn, $filter);
  if ($dd['count'] == 0) {
    // Епта, такого пользователя нет в LDAP
    return false;
  }

  // Если что-то нашли и оно в еденичном экземпляре
  if ($dd['count'] == 1) {
    $attributes = array(
      'groupmembership',
      'securityequals',
    );
    // Получим текущие значения нужных атрибутов и сохраним их
    $attr = _mcb_proxy_ldap_entry_get_attr($attributes, $dd);
    $attr['groupmembership'][] = $securityEquals;
    $attr['securityequals'][] = $groupMembership;

    // Добовляем 2 атрибута пользователю
    $r = mcb_proxy_ldap_modify($n_login_dn, $attr);
    // Добовляем теперь в саму группу  пользователя, также 2 атрибута
    $r = mcb_proxy_ldap_groupAddMember($n_proxy_group_dn, $n_login_dn);
  }
}

/**
 * Удаление указанного пользователя из указанной группы в LDAP
 * 
 * @param string $n_login  логин пользователя в eDir bocharov-ms
 * @param string $n_context второй уровень в дереве  HQM/HQC и т.п.
 * @param string $n_proxy_group наименование группы в ou=Internet_Proxy,ou=ACCESS,o=MCB
 * @param string $n_proxy_group_dn  если выставленно это значение полный путь до нужной  группы
 * @return boolean
 */
function mcb_proxy_ldap_userRemoveInternet($n_login, $n_context, $n_proxy_group, $n_proxy_group_dn = NULL) {

  $dbg = 0;

//  $n_context = 'HQM';
//  $n_login = 'bocharov-ms';
//  $n_proxy_group = 'internet_full';

  $n_login_dn = "cn=$n_login,ou=$n_context,o=MCB";
  // Дабы 
  if (is_null($n_proxy_group_dn)) {
    $n_proxy_group_dn = "cn=$n_proxy_group,ou=Internet_Proxy,ou=ACCESS,o=MCB";
  }

  $dn = "ou=$n_context,o=MCB";
  $filter = "(cn=$n_login)";
  $securityEquals = $n_proxy_group_dn;
  $groupMembership = $n_proxy_group_dn;

  // Получаем все атрибуты пользователя. Необходимо добавить обработку если такого пользователя нет
  $dd = mcb_proxy_ldap_search($dn, $filter);
  if ($dd['count'] == 0) {
    // Епта, такого пользователя нет в LDAP
    return false;
  }

  // Если что-то нашли и оно в еденичном экземпляре
  if ($dd['count'] == 1) {
    $attributes = array(
      'groupmembership',
      'securityequals',
    );



    // Получим текущие значения нужных атрибутов и сохраним их
    $attr = _mcb_proxy_ldap_entry_get_attr($attributes, $dd);

    foreach ($attributes as $key) {
      if (array_key_exists($key, $attr)) {
        foreach ($attr[$key] as $indx => $value) {
          if ($value == $groupMembership) {
            unset($attr[$key][$indx]);
          }
        }
      }
    }

    // Удаляем 2 атрибута у пользователя
    $r = mcb_proxy_ldap_modify($n_login_dn, $attr, true);
    // Удаляем теперь из самой группы  указанного пользователя, также 2 атрибута
    $r = mcb_proxy_ldap_groupRemoveMember($n_proxy_group_dn, $n_login_dn);
  }
}

/**
 * Autocomplete callback.
 * автопоиск наличия указанного пользователя в LDAP
 */
function mcb_proxy_autocomplete_user_ldap($login) {
  $dbg = 0;
  $login = trim(strtoupper($login));

  $dn = 'o=MCB';
  $filter = '(& (objectClass=Person)(objectClass=inetOrgPerson)(cn=' . $login . '*))';
  $result = mcb_proxy_ldap_search($dn, $filter);

  $matches = array();
  if ($result['count'] != 0) {
    $count = $result['count'];
    unset($result['count']);
    // Ограничиваем  подсказки 5-ю вариантами
    if ($count > 5 ){
      $count = 5;
    }
    $i = 0;
    
    // Также необходимо проверить  есть ли этот пользователь уже в БД
    while ($i < $count) {
      $item = $result[$i];
      $dn_res = check_plain($item['dn']);
      $matches[$dn_res] = $dn_res;
      $i++;
    }
  }

  drupal_json_output($matches);
}
